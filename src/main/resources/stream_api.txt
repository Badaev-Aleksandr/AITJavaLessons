Stream --> набор, последовательность элементов (объектов),
 которая поддерживает stream-методы обработки и выполнения операций

Stream operations --> операции, которые можно выполнять над потоками: промежуточные intermediate и терминальные terminal

Источник -- элементы -- промежуточные операции (операторы) -- терминальный оператор (операция)

Промежуточные intermediate --> следующие операции filter, map, sorted. Данные операции возвращают новый stream
 и могут быть связанны в цепочки.

 filter фильтрует элементы удовлетворяющие условию Predicate, проверяет значение на true или false

 map mapper дает возможность создать функцию, с помощью котрой мы можем изменять каждый элемент и пропускать его дальше

 skip(n) --> метод пропускает n элементов в списке и работает с оставшимися

 sorted() --> метод сортирует элементы в естественном порядке

 mapToInt() --> преобразует объекты Integer в примитивные типы int

Терминальные terminal --> такие как forEach, reduce, collect, count, anyMatch завершают поток, возвращают результат

forEach --> ничего не возвращает, аналог for-each, но выполняет указанные действия над элементами стрима

count() --> возвращаем количество элементов коллекции long

collect(Collector collector) --> собирает все отфильтрованные или обработанные элементы,
 сгруппировывает по указанному критерию

summaryStatistics --> для получения статистики при обработке стримов примитивных типов,
 сбор такой статистики как например минимальное, максимальное, среднее значение...

collect(Supplier supplier, BiConsumer accumulator, BiConsumer combiner) -->
 supplier (поставщик новых элементов  new ArrayList(),
 accumulator добавляет элементы в абстрактный контейнер,
   combiner объединяет все части стрима воедино),

Collectors.partitioningBy() --> разделяет элементы потока на две группы в зависимости от выполнения условия

Optional reduce (....) --> преобразовывает все элементы стрима в один объект

Optional min/max(Comparator comparator)  --> ищет минимальный или максимальный элемент.

Optional findFirst() --> вытаскивает первый элемент по результату поиска

allMatch() --> возвращает true, если все элементы соответствуют условию

anyMatch() ---> возвращает true, если хотя бы один элемент соответствуют условию

noneMatch() -->  возвращает true, если ни один элемент не соответствует условию

За основу поиска берется comparator

Laziness --> большинство промежуточных операций ленивы, они выполняются пока не будет вызвана терминальная операция

Создание Stream:
 Collection.stream создание из коллекций
 Arrays.stream(array) из массива array
 Stream.of(value1, value2..) из значений
 Files.lines(path, charset) из файлов
 Stream.iterate Stream.generate инфинитивные стримы

 toList() --> собираем элементов в List
 toSet() --> собирает элементы в Set (множество)
 counting() --> для подсчитывания количества элементов
